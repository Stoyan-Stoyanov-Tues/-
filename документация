ТЕХНОЛОГИЧНО УЧИЛИЩЕ ЕЛЕКТРОННИ СИСТЕМИ
към ТЕХНИЧЕСКИ УНИВЕРСИТЕТ – СОФИЯ

ДИПЛОМНА РАБОТА



Тема:
Авто пилот за автомобил  базаран на Raspberry Pi.




Дипломант:                                     Научен ръководител:

Стоян Стоянов                                         Росен Витанов












СОФИЯ
2014




















































				         Увод 

В днешно време ембедед системите са широко разпространени .  Вградена система Embedded system е специално проектирана система, при която компютърът е вграден в самото устройство. Думата embedded или иначе казано вградена идва от факта, че те най-често са съставна част от друга по-голяма система или са неразделна част от управляваното устройство. За разлика от персоналните компютри, тези системи изпълняват само една или сравнително ограничен брой предварително дефинирани задачи, обикновено с по-ограничени изисквания. Понеже системата е предназначена за специфична задача, то проектантът може да я оптимизира иначе казано да намали размера и цената на продукта. Вградените системи обикновено са за масово или едросерийно производство – така ефектът от снижението на себестойността им може многократно да се мултиплицира.
Тези системи се използват от портативни устройства - от MP3 плейър до големи стационарни инсталации, като управление на светофари, товарни потоци и индустриални контролери.
Възможно е в една вграждаща система да съществуват повече от една вградена система.

–	примери за самостоятелни вградени системи: Пералня

–	примери за много вградени системи в една вграждаща 
           система : Автомобил или Система за домашно кино

–	примери за самостоятелни системи: Мрежови Рутер .


Ембедет системите се развиват страшно бъро и в последните години стват все по популярни в следствие на което тяхната пазарна стойност става по – ниска и по – достъпна . В следствие на всички тези факти всяка една фирма , (компания / корпорация) която развива даден продукт или работи по даден проект намира част от решението на дадения казус в използването на Ембедед.

Дори и да не знаем ние сме обградени от ембедед системи . Като застанем и се огледаме ще забележим , че ембедед-а е навсяката като запознем от светофари , печки , хладилници и стигнем до автомобилите , дори и в модерните обществени тоалетни има вградени системи .

Целта на тази дипломна работа е да създаде автопилот, който в последствие да може да бъде вграден в автомобил. Автопилотът има за цел, не да поддържа скороста, както масово използвания темпомат, а да следи пътната  маркировка и да държи колата в очертанията на дадена лента, като така значително да улесни шофирането в условия на автомагистрала .



























3.1 - Въведение 

3.1.1 – Какво представлява автопилотът в автомобилите?
 
В автомобилите терминът автопилот се свързва със система, която потдържа константна скорост на автомобилът. Първите такива системи, датират от 1910 къде са използвани при автомобили с парни двигатели. През 1968  година в Plymouth се интегрира първия елекнронен круиз контрол(темпоматът, познат в днешно време), което е и първото електронно устроиство, което получава роля в управлението на автомобилът. В последствие ва автомобилите навлизат компютри под всякаква форме и във всички възли и агрегати от автомобилът, така че това въведение може да се приеме като изключително основополагащо за автомобилостроенето като цяло.
 
Тази система има много плюсове, но и минуси. Плюсовете на системата са:
 
1- Намалява умората върху водачът, по време на дълги пътувяния, като позволява на водачът да променя позицията на краката си, без това да намалява сигурноста на пътуването.
 
2 – Предотвратява възможността, шоф,орът да превиши ограниченито на скороста неволно.
 
3 – Водачът може да държи кракът си върху педалът на спирачката, с което да намали времето си за реакция при евентуална аварийна ситуация, с което се намалява и спирачният път.
 
 
         Минусите на системата са:
 
1 – Тъй като водачът не трябва да потдържа постоянен натиск върху педалът на газта, той по-лесно губи концетрация и заедно с това се увеличава шанса шофьорът да заспи по-време на движение.
 
2 – При лоши пътни условия – лед, сняг, мокър път – се увиличава шанса автомобилът да бъде изкаран от състояние на спокойно движение и да поднесе. Причината за това, е че системата може да приложи прекалено много газ, за да ускор автомобилът до желаната от водачът скорост, а заедно с това, единственият начин, системата да бъде изклюбена бързо е като се натисне спирачката, което дебалансира автомобилът и при лоши пътни условия, може да доведе до поднасяне.
 
Идеята на тази система е да бъде използвана на автомагистрали и скоростни пътища, където се кара дълго време с постоянна скорост и наличието на такъв тип система се явява голямо улеснение на водаът, защото така не му се налага да кара няколко часа подред, без да променя положението на кракът си. Голямата част от тези системи работят по 2 начина.
 
Първите системи за потдържане на константна скорост, интегрирани в по-старите автомобили, използват устроиство, което е сложено на жилото на газта и го кнтролира чрез вакуум – При създаването на вакум, устройството се свива е издръпва жилото на газта, с което се отваря дроселът и се форсира двигателят.
 
Вторият тип е интегриран при по-новите автомобили където няма жило на газта, а тя се подава по електронен път. Там системата работи по-лесно, защото газта се подава директно от бордовият  компютърът, който има нужната информация относно скоростта на автомобилът и подадената към момента газ и може да подеде сигнал за увеличаване оборотите на двигателят директно към компютърът му по изцяло електронен път.
 
Тъй като тези системи обекновенно се активират при скорости над 100 км/ч, когато има високо въздушно съпротивление а двигателят е набрал известни обороти,много малка часто от производителите интегрират в тези системи и възможността за използване на спирачката, защото моторната(моторна спирачка се използва, като се избере някоя предавка(колкото по-ниска, толкова по-силна моторна спирачка има) и се отпусне газта. Тогава двигателят се стреми да изравни оборотите си с оборотите на свободен ход и забавя автомобилът) такава + въздушното съпротивление са напълно достатъчни за повечето ситуаций.
 
В днешно време, в един нов автомобил може да има не само круиз контрол, но и още безброй системи, които да подобряват сигурността и да улесняват водача, независимо дали става въпрост за нормално шофиране или аварийна ситуация. Часто от тези системи идват серийно при всички нови автомобили продавани на територията на Европейският съюз, защото са част от изискванията за сигурност, които всеки нов автомобил трябва да покрие. За много от заклетите автомобилни фенове, тези системи единствено развалят удоволствието от шофирането на автомобил. Без значение, дали това се харесва или не обаче, всякакви системи от такъв тип навлезат все повече и повече в автомобилостроенето и за това е добре, всеки водач да е запознат със системите, които присъстват на борда на автомобилът му.
 
Това са системи за стабилизация, системи за разпознаване на знаци, парктроник, асистенти за сигнализация при напускане на лентата, дори и системи, които сами паркират сами при намерено подходящо парко мякто. Макар обаче автомобилът да има всички тези системи в себе си, все още не се предлага автомобил със завършен автопилот – такъв, които освен скоростта да потдържа и управлението на автомобилът.
 
3.1.2 – Целта на тази дипломна работа.
        
Целта на тази дипломна работа е да се създаде точно такъв тип автопилот, които цялостно да поема управлението на колата. Както вече се споменава по-горе в един нов автомобил има всевъзможни системи за сигурност и асистенция на водачът, но все още няма цялостен автопилот. Ако се вземе един обикновен автопилот или круиз контрол, както още се нарича, това е половината от целта на цялостния такъв – потдържа се желаната от водачът скорост. Също така, ако се вземе една система за сигнализация при напускане на пътната лента, това би било другата половина от един цялостен автопилот. Такива системи, за сигнализация, следят пътят с камери, обикновенно монтирани в огледалото за задно виждане и когато водачът започне да напуска лентата, първо сигнализира, а в по-скъпите автомобили и прави автоматична корекция на курса и го задържа в ленатата.
 
Явно автомобилните производители разполагат с всички нужни технологий, за създаването на цялостно автопилот, но такъв все още няма. Това е и целта на тази дипломна работа – да се създаде такъв, като междувременно ще бъдат намерени и причинита за отсъствието на такова решение в автомобилостроенето. Другото, което има за цел тази дипломна, е да провери дали наистина има нужда тези асистиращи системи да се толкова скъпи, колкота са.
 
Всички такива системи, включително и разработваната в тази дипломна работа, представлавят един и същи тип компютри. Такива компютри, които имат една или ограничен брой задачи, които трябва да изпълняват и са изработени и конфиигурирани с цел, изпълняването на тази задача. Такива компютърни системи се наричат embedded(вградени) системи.
 
3.1.3 – Какво са embedded системите?
 
В днешно време, компютрите са навсякъде и под всякаква форма. Най-познатият на хората компютър е персоналният. Той е олиценволението за компютър сред хората. Персоналният компютър обаче определено не е най-разпростаненият такъв. Най-често срещаният, макар и не толкова известен тип компютър се намира под формата на Embedded системите.
 
Embedded системите или вградените системи, както е буквалният превод, са такива системи, в които микроконтролерът(компютърът) е вграден вътре в самата система. Тази технология е изключително разпрастранена в днешно време. Отрамната част от всичката електроника, която човек използва в ежедневието си представлява embedded системи – от mp3 плеъри, през всякаква електроника в колите, хладилници, телевиозри, до сфетофарни уредби – embedded технологията се използва навсякъде.
 
 За разлика от персоналният компютър, embedded системите изпълняват сравнително ограничен брой функций, свързани с устроиството, в което ще бъдат вградени и следователно могат да се проектират специално за целта, без да трябва, да има неизползвани функционалности, като така се спестяват ресурси и се пести от цената на едно такова устройство, а самото такова, може да изпълнява по-добре задачата си.
 
С прочета на документацията читателят ще бъде запознат с идеята , характера , естеството и начина по , който е изработена дипломната работа . 

		Ще бъде запознат с основни хардуерни компоненти . Като тяхния принцип на работа , като тяхната схема на работа , като компоненти с помоща на , които ще се усъществи комуникацията между компнентите  и пр.

		Ще бъде запознат с Raspberry pi .

		Ще бъде запознат със използвания съпков мотор.
		
		Ще бъдат запознати с драйвърната схема .













3.2 Обзор на използваните материали и      съществуващите решения .
3.2.2.1 Както споменах в горната точка за изработване на дипломната работа беше използван голям набор от хардуерни елементи . Използваните хардуерни агрегати са следните : 
-	Распбери пи (Raspberry pi) ембедед системата .

-	Стъпков мотор (Step motor) .

-	Драйвърна схема за управление на стъпковия мотор
 
-	Камера за разпознаване на образите със стандарт  USB 2.0 .

-	Външна батерия с универсален Android накрайник за захранване на Raspberry – то .

-	USB 2.0 мишка и клавиетура за управление на вградената система.

-	USB хъб поради недостига на портове .

-	Това са всички хардуерни агрегати използвани за реализиране на проекта.

3.2.2.2 – Избор на микроконтролер.

 
Arduino микроконтролерът беше хипотетично най – добрият 
като вероятен избор, но понеже се установи, че не е
достатъчно донър от гледна точка на мощен да се справи с
видео обработката, а ултразвуковите сензори не предоставят
достатъчно обем информация за положени на пътят
напред. Наложи се да бъде търсен друт ембедед
микроконтролер.
 
Raspberry pi  контролерът е използван за осъществяването на тази дипломна работа поради редица причини . Една от причините за изборът на този въпросен микроконтролер, е че е силно разпространен в светован мащаб и за него има меко казано адски много информация, и също така е и изгоден от икономическа гледна точка, както е и напълно достатъчен като мощност е и се справя с конвертирането на потока от видео информацията от самата камера и има GPIOs (General Purpose Input-Outputs) пинове , през които може и ще бъде осъществено управлението на  електро-мотора.
 
 
Първоначалното Raspberry Pi е базирано на  Broadcom BCM2835 система на SoC чип, който включва ARM1176JZF-S 700 MHz процесор и VideoCore IV GPU. RAM паметта е 256MB, а по късните подобрени модели(B и B+) идват с 512MB RAM. Това е  процесорът , използван в голяма час от по-старите смартфони, като например Iphone 3G/3GS. Процесорът дава нива на производителност, приблизителнодоста близки на тези на Intel Pentium 2, с което се образува приблизително една сравнително добра и бюджетна алтернатива на един от по - старите настолни компютри.


 Операционната система на Raspberry Pi е базиран на Unix операционните системи :  Linux , Debian .Raspberry си имат собственна операционна система наречен - Raspbian. Софтуерът се бутва от Micro SD карта памет, с помоща на  , която поради липсата на хард диск, всички създадени файлове и програми също се съхраняват на картата памет и затова е добре, тя да бъде колкото се може по – голяма или да бъде предварително премислено в зависимост от това , каква по-точно е целта на проекта , за която ще се използва ембедед системата.
 
Един любопитен исторически факт : Всеизвестен факт е  , че
Raspberry – то е микроконтролер с много добро съотношение
на цена и капацитет . Именно благодарение на евтината си
покупна цена и сравнително мощната си производителност и
това , че лесно приложимо в света на ембедед системите през
февруари 2015 годин Raspberry – то става най – продаваният
компютър в световен мащаб с над 5 милиона бройки .
 
 
 
 
3.2.2.3 – Избор на мотор, който да задвижва воланът на колата.

 
Моторът избран за дипломната работа е стъпков мотор и по – точно казано биполярен стъпков мотор , който е със следните размери 42 х 47 мм. и прави по около  200 стъпки на оборот и тягата с която може да се справя е до 4,4 кг/см , което е доста прилично предвит целта на проекта . Мотора е достатъчно точен в стъпките които прави на оборот и е с доволно голяма тяга , поради тази причина решихме да закупим точно този стъпков мотор. Друга причина поради , която се спряхме на този стъпков мотор е , че неговото съотношение между цена и възможности  е най -  доброто , което успяхме да открием на Българския пазар .

 
Стъпковият мотор е закупен от едни от най – известните магазини за подобни компоненти на територията на република България (Роботев) . Роботев е магазин известен с това , че в него може да се намерят ако не всички то поне най-важните ембедед системи , както и голяма част от тяхните компоненти.
Моторът беше закупен от там , но към такива сложни мотори се прилага и драйвърна схема (платка управляваща мотора) , която посредством връзка към мотора и Распаберито управляват моторчето .
  
3.2.2.4 Относно софтуерната част (използван език , причини за насочване към този език и използвани библиотеки).

Java беше първоначално избраният език за програмиране , който е напълно съвместим с използваната библиотека OpenCV обаче в процеса на инсталация стана ясно , че работи с дадената библиотека , но само под Eclipse , което от друга страна е много лошо понеже се изисква по-силна машина за да се подкара на нея еклипс , а въпросният промишлен компютър или иначе казано ембедед система е със сравнително лоши параметри и подържането на Eclipse ще бъде по-бавно от скороста , която е нужна за подържане на системата .



C и C++ също са хипотетични избори , като езиците за програмиране, също така те могат да бъдат използвани с тази библиотека и има много проекти и материяли под формата на  информация за тях в глобалната мрежа, но не бяха избрани, поради причината , че последно използваните езици с които сме работим и програмираме и при положение, че измежду въпросните езици има такива, които отговарят на изисванията на проекта, беше избран , като подходящ език един от тях. 

 
Използваният език за реализация на софтуерната част е Python . След много на брой дълги дни и безсънни нощи разбрахме , че Питон ще бъде най - подходящия език за използване . Тои е съвместим с използваната от нас библиотека с помоща на  , която се извършва видео обработката. Също така има GPIO пинове , с които се управлява Raspberry - то (ембедед системата). А отделен съпрос е , че в интернет е пълно с информация за това как се работи с пиновете , кой какъв е и каква е неговата роля . 

Python е интерпретируем, интерактивен, обектно – ориентиран език за програмиране, създаден от Гудо ван Росум в началото на 90 – те години. Python предлага добра структура и поддръжка за разработка на големи приложения. Той притежава вградени сложни типове данни като гъвкави масиви и речници, за които биха били необходими дни, за да се напишат ефикасно на С.


3.2.2.5 – Избор на текстов едитор.

 
Кодът не е с особенно голями размери и поради тази причина не е необходим по – специялен едитор за по – лесно и цветно писане на кода . поради тази причина кода е написан на gedit.
Gedit  - това е фабричен текстов едитор присъщ за unix операционните системи , както notepad  е присъщ за windows
операционните системи .


 


		






















3.3 Същинска част .

3.3.1 Какво е ембедед система ?
Embedded – вградена.

Вградените системи са неотменна част от ежедневието ни. Те съчетават хардуер и софтуер, които са вградени в някакво устройство. Примери за вградени системи са дистанционното управление за телевизора или климатика, фотоапаратите, MP3 плеърите, по-съвременните печки, перални машини, телевизори , светофари и всякаква битова електроника. Те представляват специализирана компютърна система и както всеки компютър си имат микропроцесор, памет и периферни устройства, които се управляват от софтуер. Както всеки компютър, и вградените системи се програмират от софтуерни инженери, които пишат програмен код. Такива специалисти се наричат embedded developers (разработчици на вградени системи).

 
За микроконтролер, има прекалено много решения, 2-те най
подходящи от които са, Raspberry pi и Arduino. Това, което
прави тези два микроконтролера, най-подходящи, е че са най-
използваните е съответно за тях има най-мнага информация. Освен това съм работил и с двата и дова се явява предимство, което пести време от търсене на документация в интернет.
 
Изискванята към един такъв микроконтролер са да бъде разпространен, за да може да има достатъчно информация и материали, за него. Освен това трябва да може да има нужните портове за комунукация.




3.3.2 Видове разпространени Ембедед системи :


3.3.2.1 Микроконтролери Ардуино.

 



 






 


Ардуино (Arduino) е микроконтролер с отворен код и лесен за употреба хардуер и софтуер (език за програмиране и среда за разработка). Ардуино контролерите струват относително евтино (започват от около 40 лв.), а средата за разработка се предлага безплатно за Windows, Mac OS X и Linux. Най-често Ардуино платките са базирани на архитектурата Atmel AVR (8-битова платка с RISC процесор ATmega328).
За Ардуино се програмира на езика Processing, който е специално създаден за да направи програмирането лесно и просто като за начинаещи. Той скрива сложността на традиционното програмиране за вградени системи и микроконтролери зад прости парадигми и програмни примитиви. Вместо да програмирате на езика C, който е доста по-сложен и по-труден, вие пишете програми на езика “Processing”, а след това средата за разработка (т.нар. IDE) прехвърля (конвертира) вашата програма на езика C и я качва върху контролера (платката) чрез стандартен USB кабел.
Платката Arduino може да се разширява с добавяне на допълнителни модули и така се разширява нейната функционалност. Например може да се добави Ethernet модул, за да се ползва TCP/IP базирана мрежова комуникация или GSM модул, с който да се комуникира по мобилната мрежа също така може да се добави и Wi-fi модул. 

Ардуиното е наистина много приятен и сравнително лесен за използване , той може да се използва както от деца така и от възрастни хора.

-	Както всеки човек , който се е докосвал някога до някой програмен език знае , че първата програмка с която се започва винаги е така нареченият “Hello world” (здравей свят) . Честата практика при програмните езици е тази първоначална програмка , да има за цел да принтира нещо на екрана без начение дали това ще е число или буква (изречение). Обачи при ембедед системите тази “Hello world” – програмка има коренно различна идея , визия , ефект и краен резултат . В най – общия случей поздравителната програмка представлява светлинен индикатор (LED) , който има за цел да светне .
-	Как това може да бъде реализирано на Ардуино :
Има два начина . Първия ще го наименувам лесен , а втори труден.

Лесният начин е следния : да се закупи диод (LED) на който плюса да му бъде вурзан на 13 – ти пин на Ардуиното , а минуса в горния пин , който е така наречената земя (GND).
Ето как изглежда схемата на връзване:




 



Трудният начин е следния : да се закупи диод (LED) , да се закупи бредборд (това представлява нещо като платка на , която не се запоява , а има пинове , в които се вкарват използваните матеряли като на пример : Лед- диоди , резистори , кондензатори , потенциометри и т.н. ) , да се закупи съпротивление и проводници .
Начинат на свързване и работа : на бредборда се слаза съпротивлението след него се слага плюса на Лед диода и в долния ред пинове (дупчици) се слага минуса на Лед-а . В 13 – ти порт на ардуиното се слага единия край на проводника (свръзващия елемент) , а другият край на проводника сле слага в бредборда точно преди съпротивлението . В GND – земята на ардуиното се слага единия край на другия проводник , а края му се слага веднага след минуса на Лед – а в бредборда.
Ето как изглежда схемата на връзване:


 


Това са двата начина за свързване на работната схемата .

- Кодът управляващ хардуера :

Целият код :

/*
  Blink
  Turns on an LED on for one second, then off for one second, repeatedly.
 
  This example code is in the public domain.
 */
 
// Pin 13 has an LED connected on most Arduino boards.
// give it a name:
int led = 13;

// the setup routine runs once when you press reset:
void setup() {                
  // initialize the digital pin as an output.
  pinMode(led, OUTPUT);     
}

// the loop routine runs over and over again forever:
void loop() {
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(1000);               // wait for a second
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
  delay(1000);               // wait for a second
}

Какво , как и защо се случва ? Пояснение.

int led = 13; - този фрагмент казва на ардуиното , че 13 – ти пин ще се използва като output и ще осигурява необходимият ресурс необходим на Лед - а да светне.

void setup() { } – от тук нататък започва същинската част на програмата . Setup осигурява , че при натискане на Reset бутона ще започне програмата от начало с функционалност зададена в тялото на Setup.


pinMode(led, OUTPUT); - пинмод е функция , която има следната функционалност : в тялото и се подават два параметъра разделени със запетайка. Първия параметър е името на променливата (в случея пина , който използваме) , а втория е начина по , който ще се използва пина .

void loop() { } – това е безкрайният цикъл на всяка една ардуино програма , в който се случват важните действия .

digitalWrite(led, HIGH); - Тази функция работи за аналоговите пинове на Ардуино платката . Всяко едно ардуино има analog (аналогови) , digital (цигрови) и други портове. Тази гункция пак се състои от два параметъра . Първия е led – което съответства на използвания пин , а втората HIGH вдига пина в хай и , когато дойде тази част от кода Лед – а светва.

delay(1000); - Това е функция с помоща на , която се реализират изчаквания (паузи) . Това се случва след като се подаде параметър в скобичките , който е число . Функцията приема числа , които ги конвертира в мили секунди и в този случей като имаме 1000 мили секунди се генерира пауза от една секунда . 

digitalWrite(led, LOW); - Тази функция работи за аналоговите пинове на Ардуино платката . Всяко едно ардуино има analog (аналогови) , digital (цигрови) и други портове. Тази гункция пак се състои от два параметъра . Първия е led – което съответства на използвания пин , а втората LOW сваля пина в лоу и , когато дойде тази част от кода Лед – а изгасва.




















3.3.2.2 Микро контролер Raspberry pi .





 











 
 



-	История :

През май 2011 г. Дейвид Брабам представи първия концепция Raspberry Pi размерите на USB-флаш устройство .

В края на месец юли 2011 г. е завършен и изпратен в производството на алфа-версия на борда, и вече 12 август Raspberry Pi Foundation е получил първата партида от устройства. Alpha версия на компютъра съдържа няколко тестови функции и скъпи предмети, които са били извадени от окончателния вариант. Също така, последната версия е 20% по-малък и се състои от четири слоя вместо шест 

10 Яну 2012 компанията обяви старта на първата партида от 10,000 борда модел «B» .

29ти Февруари 2012, продажбата на карти модел «B».

16 Юли 2012 разработчиците на проекта твърдят, че премахването на ограниченията относно реда на устройствата Raspberry Pi «Б».

14 Дек 2012 Raspberry Pi «А» пусната в производство.

14 Юли 2014 разработчиците на проекта са освободени третата версия на Raspberry Pi «B +».

02 февруари, 2015 разработчиците на проекта са освободени четвъртата версия на Raspberry Pi «2B».

- Външен вид :
Computer простира напълно сглобен от четири слоя печатната платка с размерите на банкова карта. Стандартният пакет включва само самата платка. Захранване и флаш карта, трябва да се поръча отделно.

Технически подробности :
Raspberry Pi се предлага в три нива на оборудване: моделът «А», на модел «B» и модел «B +». Всички версии са оборудвани с ARM11 процесор Broadcom BCM2835 с тактова честота 700 MHz и RAM модул по 256MB / 512MB пуснат на технологията «пакет-на-пакет enru» директно върху процесора. 
Модел «А» е оборудван с един USB 2.0 порт, на модел «Б» две, и модел «B +» на - четири. Също така в моделите «Б» и «B +» присъства порт Ethernet. В допълнение към основната сърцевина, BCM2835 включва графичен енджин с поддръжка на OpenGL ES 2.0, хардуерно ускорение и FullHD видео и DSP-ядро [5] [1] [9]. Една характеристика е липсата на часовник за реално време .

Video изход е възможно чрез композитен RCA конектор или чрез цифров HDMI интерфейс. Във версия «B +» изход е възможно чрез audiorazem 3.5. Кореновата файлова система, ядрото графични и потребителски файлове се намират на картата с памет SD, MMC, микроб (само за модел «B +») или SDIO .

Един от най-интересните характеристики е присъствието на Raspberry Pi пристанище GPIO (общо предназначение вход / изход). Благодарение на тази "червено" компютър може да се използва за контрол на различни устройства. Модел «B» карта Настоящото 26 пристанища, както и в модел «B +» - 40 пристанища GPIO.


-	Софтуер :

Raspberry Pi работи основно на операционни системи, базирани на Linux ядрото. Run Windows станало възможно благодарение на средствата за виртуализация като XenDesktop [14]. ARM11 базирани на версия 6 ARM, където няколко популярни версии на Linux вече не тече. За да инсталирате операционната система, там е инструмент Noobs.

- Операционни системи .
- Официално Поддържани операционни системи:

Raspbian препоръчва за всички онези, които са само началото, за да научите повече за Raspberry Pi .

Pidora - Fedora за Pi ремикс Fedora Linux .

OpenELEC XBMC цифрови медиен център с отворен код Linux-базирани .

Raspbmc XBMC цифрови медиен център с отворен код Linux-базирани . 

RISC OS - "родния" OS за RISC процесор (което включва ARM процесори) .

За да инсталирате операционната система се използва инструмент Noobs. Можете също така да изтеглите изображение на операционна система и да го разположи върху SD-картата.

- Други операционни системи : 

FreeBSD.

Kali Linux операционна система за pentest.

Archlinux ARM.

Raspbian Server Edition Raspibian олекотена версия с някои допълнителни пакети.

RISC OS.

IPFire разпределение на защитната стена системи с отворен код за x86 и ARM. Тя ви позволява да направите Raspberry Pi проста маршрутизатор за домашни мрежи и малки офиси.

Raspberry Pi Thin Client Thin Client
обеща подкрепа за Windows 10 Raspberry Pi 2B .

В разработката на: 

Андроид.

Chromium OS.

Puppy.

OpenWRT.



Характеристика на  Raspberry pi :

-	Процесор : 700MHz ARM11 .
-	Память: 512MB SDRAM
-	OpenGL ES 2.0
-	Видео: 1080p30
-	Аудио: H.264 high-profile decode
-	Съставен HDMI видеоизход
-	USB 2.0
-	Слот за :  SD/MMC/SDIO
-	Системен вход изход с общо предназначение (порт GPIO, подходящ за управление на вътрешни устройства).
-	Ethernet адаптер 10/100 Мбит (Необходим за връзка с интернет).
-	Open software: ОС Raspbian



3.3.2.2 Избор на микроконтролер:
 
Arduino микроконтролерът беше разглеждан като най
вероятен избор, но тъй като се установи, че не е достатъчно
мощен да се справи с видео обработката, а ултразвуковите
сензори не предоставят достатъчно навременна информация
за състоянието на пътят напред, де наложи да се търси друт
микроконтролер.
 
Raspberry pi микроконтролерът е използван за реализирането на тази дипломна работа. Причината за изборът на този микроконтролер, е че е силно разпространен и за него има много информация, изгоден е от икономическа гледна точка, достатъчно мощен е да се справи с обработката на видео информацията от камерата и има GPIOs(General Purpose Input-Outputs), през които могат да бъдат управлявани електро-мотори.


3.3.2.3 GPIO пинове на Raspberry pi . Какви са , колко са и каква роля вършат :
 


-	Въведение в GPIO и физическо програмиране на Raspberry pi.

Една много полезна функция на Raspberry Pi е ред на GPIO (общо предназначение вход / изход) щифтове по ръба на борда, в непосредствена близост до жълтия видео вход .

-	GPIO пинове.

Тези изводи са физически интерфейс (за връзка) между Raspberry Pi и външния свят. В най-простия случей, можете да мислите за тях като за ключове, които можете да включите или изключите (вход), или чрез Raspberry Pi може да включите или изключите (изход). Седемнадесет от 26-пина са GPIO пина; другите са електрически или наземни пина.



 



-	GPIO оформление.
Какви са те и за какво са ? Какво мога да направя с тях ?

Можете да програмирате пиновете за да си взаимодействат по невероятни начини с реалния свят. Входове не трябва да идват от физически ключета . Тя може да бъде вход от сензор или сигнал от друг компютър или устройство, например. Изходът може да направи нищо, от включване на диода към изпращане на сигнал или данни към друго устройство. Ако Raspberry Pi е в мрежа, можете да контролирате устройства, които да са прикрепени към него отвсякъде  и тези устройства могат да изпращат данни за минали периоди. Свързване и контрол на физически устройства през интернет е мощно и вълнуващо нещо, и Raspberry Pi е идеален за това. Има много блестящи примери за физикъл компютинг .

Забележка: Трябва неща като достъп до мрежата, мрежа способни изчислително устройство, и на електроенергия. 

-	Как работят GPIO пиновете :

Output:
Внимание :  Ако следвате инструкциите , работата с GPIO пиновете ще е безопасна и забавна. При произволно включени проводници и източници на енергия във вашето Raspberry  Pi обаче, може да го убие или да доведе до трайни повреди. Лоши неща могат да се случат, ако се опитате да свържете неща към вашето Распабери , които използват много енергия : Светодиодите са финиот гледна точка на консумация , но мотори не са и ако окабеляването не е добре направено може да се случат доста и все неприятни работи . Ако се притеснявате от това, тогава може да искате да обмислите възможността за използването на бред борд, докато не са достатъчно уверени, за да използвате GPIO пиновете директно.	

Без да се обръща внимание на контролера за момент, една от най-простите електрически вериги, които може да се изгради е батерия свързана към източник на светлина и превключвател .




 

Проста схема :
Когато ние използваме GPIO пин като изход , за Raspberry Pi замества както ключа така и батерията в диаграмата по-горе. Всеки щифт може да се включи или изключи, или да отидете високо или ниско при използването на компютърни термини. Когато щифта е HIGH да подава 3.3 волта (3v3); когато щифта е ниска тя е изключена.

Ето една и съща верига с помощта на Raspberry Pi. Светлинният индикатор е свързан с GPIO пин (което може да подаде + 3v3) и с земята (GND - ground) пин (който е 0V и действа като отрицателния полюс на батерията) .




 

-	Input .

GPIO изходите са лесни . Те са Включено или изключено, High или LOW, 3v3 или 0V. Входовете са малко по-сложни, защото се различават по начина, по който цифрови устройства работят. Въпреки , че може да изглежда разумно просто да се свърже един бутон в целия вход пинов и един пин ground , на Распаберито да се бърка за това дали бутона е включен или изключен. Тя може да работи правилно , но може и да не работи правилно. Това ще бъде малко като пътуване на дълбоко в космоса. Без позоваване ще бъде трудно да се каже , ако се явявате нагоре или надолу, или дори да не се знае какво точно означава това нагоре и надолу .

Ето защо, ако сте въвели фрази като "дръпни нагоре" и "дръпни надолу" в Raspberry Pi GPIO уроци. Това е начин пинът да даде справка , така че не се знае със сигурност, когато се получи справката дали е вход.

- Речник за използваните термини :

GPIO:

Вход с общо предназначение / изход в този конкретен случай щифтовете на Raspberry Pi и можете да правите каквото искате с тях . Наречени са така, защото можете да ги използвате за всякакви цели . Най-добре може да се използват или като входове или изходи, в зависимост от вашата програма и цел .

LED:

Излъчване на светлина diode – малка , ниска консумация на енергия. Източник на светлина, който се използва широко в областта на електрониката. Идеален като въведение към физикъл компютинг на Pi. 

PHYSICAL COMPUTING (Физикъл компютинг)  :

Computing - включва конкретни неща, свързани с компютър, извън стандартните входни и изходни устройства като клавиатури и монитори. Помислете бутони, светлини, роботи, аларми, датчици, автоматизация на дома, плюшени мечета, наречени Бабидж в близост пространство и така нататък. Ние обичаме физикъл компютинг, защото, както е много забавно, това е толкова мощен преподаването и изучаването на инструмент и насърчава творчеството, решаването на проблеми и сътрудничество. Computing извън екрана ангажира деца от всички възрасти, и ще можете да направите много готини неща . 


3.3.2.4 Драйвърна схема .



3.3.2.4.1 Драйвер за стъпков мотор с А4988


Това е брейкаут платка за драйвера за стъпкови мотори А4988 на Allegro. Драйверът разполага с регулируем ограничител на силата на тока и дава възможност да се избират от пет различни размера на стъпката, с която да се движи мотора. Работи с напрежения от 8V до 35V и може да подава до 2А на намотка и има защита прекомерна сила на тока. 

3.3.2.4.2 Основни характеристики :

- лесен контрол на посоката и броя стъпки
- пет различни размера на стъпката – цяла, половин, четвърт, една осма или една шестнайсета.
- потенциометър за регулиране на максималния ток, който да достига до мотора. Така може да подавате напрежение по-високо от номиналното за мотора за да постигнете по-голяма тяга и по-голям брой стъпки за единица време.
- интелигентен chopping контрол и автоматичен избор на decay режима (fast decay или slow decay).
- защита от прегряване, защита при обръщане полюсите на захранване, както и автоматично изключване при прекалено ниско напрежение.

3.3.2.4.3 Използване на драйвера :

 
 


3.3.2.4.4 Свързване на захранването :

Драйверът се нуждае от напрежение за логическо управление (logic supply current) между 3 и 5.5V, което се свързва към VDD и GND пиновете. Нуждае се и от напрежение за управление на мотора (motor power supply) между 8 и 35V, което се свързва към VMOT и GND пиновете. Тези захранващи напрежения трябва да имат подходящи декуплиращи кондензатори в близост до платката, и трябва да могат да издържат на пикове до 4А.


3.3.2.4.5 Свързване на мотора : 

Важно : Свързването или откачването на мотора докато драйвера работи може да го унищожи.
Драйверът може да управлява както униполярни така и биполярни стъпкови мотори. За свързване на биполярни мотори с по четири кабела вижте схемата по-горе.

3.3.2.4.6 Размерът на стъпката (и микростъпката) :

Обикновено стъпковите мотори имат номинален размер на стъпката (например, 1.8 градуса или 200 стъпки на оборот), което се отнася към целите стъпки. Драйвери като A4988 позволяват да се постигне по-голяма резолюция като използва позициониране между целите стъпки. Това се постига когато намотките на мотора се енергизират с междинни нива за силата на тока. Така например режимът за четвърт стъпка дава на 200-стъпков мотор четири пъти по-голяма резолюция или 800 стъпки на оборот. 
Този драйвер позволява да се избира от пет различни резолюции (или размери на стъпката) чрез сигналите подавани към пинове (MS1, MS2, MS3). И трите пина - MS1, MS2, MS3 са фабрично свързани със 100kΩ pull-down резистори. Силата на тока трябва да е ограничена достатъчно ниско за да работят режимите за микростъпки. В противен случай междинните нива за сила на тока няма да са точни и моторът ще работи в режим за цяла стъпка. 


MS1	MS2	MS3	Резолюция (размер на стъпката)
LOW	LOW	LOW	цяла стъпка
HIGH	LOW	LOW	половин стъпка
LOW	HIGH	LOW	четвърт стъпка
HIGH	HIGH	LOW	една осма стъпка
HIGH	HIGH	HIGH	една шестнайсета стъпка


3.3.2.4.7 Пинове на контролера : 

Всеки импулс подаден на STEP пина съответства на една стъпка (или микростъпка) в посоката избрана чрез DIR пина. Имайте предвид, че STEP и DIR пиновете не са „дърпани“ фабрично към нито едно от логическите нива и не бива да се оставят висящи. Ако ви е нужно въртене само в една посока, свържете DIR пина директно към VCC или GND. Интегралната схема A4988 има три пина за контролиране режима на работа - RESET, SLEEP и ENABLE. За повече подробности за тези пинове вижте дейташийта. Забележете, че RESET пина е оставен висящ и ако не го използвате го свържете към съседния SLEEP пин.


3.3.2.4.8 Ограничаване силата на тока :

За да се постигне по-голям брой стъпки на оборот и по-добра тяга, подаваното напрежение към мотора е много по-високо от допустимото без ограничаване силата на тока. Например, ако максималният ток за мотора е 1А, а съпротивлението на всяка от намотките е 5Ω, тогава максимално допустимото напрежение е 5V. Ако този мотор се захранва с 12V, броя стъпки за единица време ще е много по-голям, но силата на тока трябва активно да се ограничи до 1А за да не се повреди мотора. 

Драйверът A4988 поддържа такова активно ограничаване на силата на тока, и тример потенциометърът на платката се използва за да се определи границата. Един от начините да нагласите границата е да използвате драйвера в режим за цяла стъпка и без да подавате импулси на STEP пина да измерите силата на тока на намотките. Измераната сила на тока ще покаже границата умножена по 0.7 (тъй като и двете намотки са енергезирани и ограничени на 70% в режим на пълна стъпка). 


3.3.2.4.9 Съображения за отделянето на топлина : 

По спецификация максималната сила на тока за интегралната схема A4988 е до 2А на намотка, но в действителност максималната сила на тока, която може да се постигне зависи от това колко добре може да охлаждате чипа. Брейкаут платката е проектирана да отделя топлина, но ако ще подавате повече от 1А е необходим радиатор или друг метод за допълнително охлаждане. Препоръчваме подходящо оразмерените радиатори и термопроводима лепенка.
Важно : интегралната схемадостига температура достатъчно висока за да ви изгорят много преди да прегрее.

3.3.2.4.10 Електрическа схема :

 




3.4 Резултати

3.4.1 Проблеми :

3.4.1.1 Проблеми при инсталирането на Java + OpenCV .

Първоначалната идея беше проекта да се реализира с на програмният език Java с помощта на библиотеката OpenCv.
Всичко започна с инсталацията на OpenCv на лаптопа на , който щеше да се напише кодът разчитащ инфорацията подавана от камерата за пътната маркировка и подаващ команди към стъпковия мотор. На теория всичко звучи и изглежда иеално , но в действителноста опитите за инсталиране на библиотеката върху Linux Ubuntu вървяха в една безкрайна прогресия , която представляваше нещо от сорта на греда след греда . Опитите се прехвърлиха върху микро контролера (Raspberry pi –то ) , но поради характевистиките му , които се равняват на няколко пъти по слаби от тези на Pc – то всичко се случваше адски бавно и мачително . Не само , че всичко се случваше адски бавно ами една от стъпките представлява едно билдване , което траеше с часове , но като кажа часове не си представяйте час , два или три ами над 6 – 7 часа и нали се досещате колко е приятно като се счупи на 70 % приблизително . и мачението започва отново и отново . Всъщото време протичаха и всевъзможни други опити на лоптопа или иначе казано нелепи опити докато не решихме да пробваме целия процес на друга операционна система . Пробата беше извършена на Windows  и по законите на “Мърфи” там нещата станаха и OpenCv –то беше подкарано под Eclipse , но това не беше полужително , защото  подкарването на Eclipse върху Raspberry –то представлява нещо невъзможно , поради слабите ми характеристики. Въпреки всичко опитите продължаваха с пълна сила и след намесата на дипломният ръководител стана ясно , че проекта няма да може да се осъществи на Java.

3.4.1.2 Инсталиране на Python + OpenCv.

Плана се смени и програмният езикът с , който ще се осъщесви проекта стана Python . С помоща на гайда се започна инсталацията на Python + OpenCv . Започна се инсталация на стъпка 1 , стъпка 2 .... стъпка “n” и всичко завърши успешно . Направиха се няколко теста и те също бяха успешни .
Стъпка две инсталацията на Python + OpenCv на ембедед системата .Започна се стъпка 1 , стъпка 2 … стъпка “n - 1”  , но излезна ERROR въпреки това се оказа , че мястото на картата е малко . Закупихме нова карта направихме всичко както му е редът и всичко се получи . Проведохме няколко теста и те също бяха успешни . 

Резултат : имахме оборудван персонален компютър , както и оборудван микроконтролер с необходимите софтуерни компоненти .


3.4.2 Разработка :

3.4.2.1 Закупуване на нужните хардуерни компоненти .

-	Стъпков мотор . 
-	Драйверна схема :

 

-	Raspberry pi : 

 

-	Кабелни обувки
-	Термо паста
-	USB кабел 
-	Външна батерия 
-	И други .


3.4.3 Окабеляване на драйверна схема .

Това е драйварът на мотора, които се свързва по следният начин:

VMOT пинът, е захранването на моторът – там се подава положителния край на захранването на моторът. Захранването трябва да бъде между 8 и 35 волта и под 1 ампер.

GND пинът, е заземяването на захранването на моторът. Там се свързва отрицателния край на захранването на моторът.

2B – първият кабел, на първата от намотките на стъпковият мотор.

2A – вторият кабел, на първата от намотките на стъпковият мотор.

1A – първият кабел, на втората от намотките на стъпковият мотор.

1B – вторият кабел, на втората от намотките на стъпковият мотор.

VDD – Там се подава положителният край на захранването на самият драйвър. То трябва да е 5 волта и до 1 ампер. 

GND – Това е заземяването на драйвърът – там се свързва отрицателният край на захранването на драйвърът.

DIR – Там се подава посоката на въртене на моторът, ако не е необходимо мотоърт да сменя посоката си на въртене, се свързва към 5V пин на raspberry-то или GND пин на raspberry-то. При необходимост да се сменя посоката на въртене на моторът, се свързва към пин, който може да сменя състоянието си.

STEP – Контролира броят стъпки, които моторът трябва да изпълни. Свързва се към raspberry-то и работи с подаване на импулси към него. Един импулс, е една стъпка в зададената от DIR пинът посока. Един импулс, представлява смяна на напрежението на пинът от 5V към 0V или обратното.

SLEEP, RESET, ENABLE – Използват се за контролиране на състоянието на схемата. В тази сипломна работа не са използвани.

MS3, MS2, MS1 – Използват се когато е необходимо моторът да изпълни по-малко от цяла стъпка. В зависимост от състоянието, в което са поставени тези пинове са възможни различни комбинаций, като така може да бъде изпълнена 1/16 от цяла стъпка на моторът. Тези пинове не са използвани в дипломната работа, поради факта, че няма нужда моторът да изпълнява по
малко от цяла стъпка. 

 
-	Алуминиево парче + термо паста за охлаждане на драйвер.

 

- USB кабел за захранване на драйверната схема .

 
3.5 – Икономичеси аспект

3.5.1 – Цена на отделните компоненти, използвани в проекта.

Raspberry Pi – Приблизително 30 паунда или около 75 лева, от ebay.co.uk.

	Стъпков мотор – 50 лева от Роботев(robotev.com).

Драйвър за стъпковия мотор – 12 лева от Роботев(robotev.com).

Кабели за свързването на драйвърът с raspberry-то – 12 лева от Роботев(robotev.com)

Уеб камерата, която следи пътят – 60 лева от Технополис(technopolis.bg)

Батерия, която да захранва raspberry-то – 40 лева от Технополис(technopolis.bg)

Обща стойност на компонентите – приблизително 250 лева.

3.5.2 – Цена на проекта, спрямо съществуващите вече такива системи.
	
Това е един от най-важните аспекти на тази дипломна работа – да предложи една алтернатива на разработваните такива проекти, които са основно два типа. Проектът нямя точен аналог и за това ще бъде срамнен с подобните на него, вече съществуващи проекти и разработки.

Първият тип, с които ще бъде сравнен проектът, са системи, подобни на тази разработвана от Google, която трябва да даде на колата възможноста да се движи изцяло автономно. 

Вторият тип такива системи(вече предлагани на пазарът), са системите за подпомагане на водача(примерно система за предупреждение при напускане на пътното платно), който се предлагат в повечето нови автомобили, срещу доплащане от около 1000 до около 5000 лева, в зависимост от самият проидводител. 

Системата, разработена в рамките на тази дипломна работа се доближава изключително много до вторият тип системи(вече предлаганите от автомобилните производители). Основната разлика, между този проект и вече съществуващите такива, е че серийните системи, към момента имат за цел да се наместват в случай, че водачът направи грешка и само част от тях имат възможнжст да задържат автомобила в границите на пътната лента. При тези цени на системите, които вече са на пазара, може да се каже, че постигната стойност от около 250 лева, наистина доказва, че системата може да бъде вградена в автомобил, без особеното му оскъпяване.

























3.6 – Бъдещо развитие

3.6.1 – Подобряване на скороста на системата.

Един от основните проблеми на проекта в този му вид, е че raspberry-то, не може да обработва кадрите от камерата с нужната скорост. Този пробрем има две възможни решения:

1 – Покупка на камера, специално предвидено за Raspberry Pi, която, комуникира с него през специално създаден за целта CSI порт, с което подава информацията на камерата директно в процесорът, като така многократно се подобрява скороста, с която се приемат кадрите от камерата.

2 – Подмяна на използваното Raspberry Pi с по-мощната B+ версия. 

Най-удачният вариант, е да се комбинират двете решения, за да се постигне максимална ефективност на системата. Причината да не бъдат приложени тези решения тук, е че използваната в проекта камера бе вече закупена, когато в интернет намерих информация, относно камерата за raspberry-то. 
Самото Raspberry Pi бе закупено в този си вариант, поради финансови причини.

3.6.2 – Подобряване на кодът по такъв начин, че освен маркировката да разпознава и различни препятствия по пътят.

Това може да бъде интегрирано, като се добави разпознаване на повечето различни от цветът на асфалта цветове. Заедно с това трябва да се добавят различни сензори – например ултразвукови – които да следят разстоянието до 10 метра пред колата за спрели коли, пешеходци и т.н. Идеята на тези сензори е да деистват в градска среда, при ниска скорост.

3.6.3 – Подобряване на системата по такъв начин, че да има възможност да потдържа и скороста на колата.

За подобряването на системата по този начин, е необходима поставянето на още 2 стъпкови мотора, които да управлят газта и спирачката и колата на която се интегрира системата, да бъде с някакъв тип автоматични скорости(класически автоматик(с хидро-трансформатор), роботизирани ръчни скорости или безстепенна кутия), защото система, която да управлява автомобил с ръчни скорости би била значително по-сложна и би дублирала изцяло една роботизирана скоростна кутия, което напълно обезсмисля работата по такова начинание.
Скоростта ще бъде следена с GPS устроиство, ще бъде сравнявана с със задаената от потребителя скрост и при несъответствие трябва да бъде коригирана.

3.6.4 – Подобряване на автопилотът, така че вграждането му, да не нарушава интериора на колата.

За тази цел е нужно, всички котролиращи устроиства да бъдат покрити и да не пречат с нищо на шофьорът. Моторът, управляващ воланът трабва да бъде монтиран вътре в кормилната колона, директно зацепен за карданът на воланът. Зацепването ще става посредством зъбни предавки, като е нужно да се подбере мястото, където зъбното колело на карданът да бъде максимално голямо, за да бъде улеснена работата на моторът. 
Управлението на газта, може да бъде усъществено на самото жило на газта, в двигателния отсек на автомобилът, а ако автомобилът е с електрическо подаване на газта -  посредством самият компютър на двигателят, което би изсквало разработка на система, която да комуникира с този компютър.
Управлението на спирачката, трябва да бъде извършвано също извън кокпита на колата, за да е сигурно, че моторът няма да попречи по някакъв начин на водачът, когато водачът иска да се намеси, за да коригира някаква грешка на системата или просто иска да управлява сам автомобилът.

3.6.5 – Вграждане на възможност за аварийно изключване на системата.

Всяка една такава система, трябва да предоставя на водачът възможността, да я изключи по най-бързият начин, в случай, че системата допусне някаква грешка или на пътят възникне ситуация, която изсква намесата на човек. Ако системата не предоставя такава възможност, тя би била изключително опасна за използване.
Аварийното изключване на системата трябва да представлява бутон, поставен на удобно за водачът място, които да прекъсва токът на всички мотори по системата, както и на самият микроконтролер. Освен това, моторът, които е свързан към жилото на газта, трябва да бъде откачен от самото жило, защото за подаването на газ от него е нужна много малка сила и ако се спре токът на моторът, но той остане на позиция, е възможно жилото да не успее да се върне в изходна позиция и колата да остане в положение със заседнала газ. Това може да бъде изключително опасно, особено на кола с автоматични скорости, където водачът няма възможност да прекъсне силовата връзка между двигателя и скоростите.

3.6.6 – Поставянето на камерата, на място, което няма да нарушава дизаина на интериора на автомобилът и няма да блокира видимоста на водъчът по никакъв начин.

Цялата тази система, не трябва по никакъв начин да нарушава вътрешното пространство на автомобилът, и още повече не трябва да пречи на видимостта извън автомобилът. В настоящият вариант на проекта обаче това не е така и това е едно от нещата, които трябва да се подобрят за в бъдеще.
За да може, камерата да не пречи нито на естетиката, нито на видимостта на автомобилът, тя трябва да бъде поставенна на скрито място. Такива места се явяват, огледалото за задно виждане и нишата между таблото с уредите и предното стъкло на автомобилът. От тези два варианта, по-удачният е, камерата да бъде монтирана от задната страна на огледалото за задно виждане, защото, така няма как в слънчево време да се отразява на предното стъкло и освен това така ще бъде разположена в центърът на автомобилът, а и в една от най-високите му точки, което ще осигури добра видимост на камерата към пътят. Това е и решеието, което прилагат автомобилните производители в различните системи, които изискват следене на пътят с камера.

3.6.7 – Подобряване на захранването на микроконтролера и моторите.

Начинът, по който е изградено захранването в момента, особено това на микроконтролерът е приложимо само в лабораторни условия. За поставяне на системата в автомобил обаче, е нужно да се вземе захранване от самата ел инсталация на колата и да се преобразува до точните стоиности, нужни за отделните компоненти на системата, за да може тя да работи максимално бързо и точно.

3.6.8 – Настроика на микроконтролерът по такъм начин, че при пускането му веднага да се зарежда програмата, която управлява системата.

За прилагането на системата в едни автомобил е нужно, тя да бъде вклюбвана и изключвана с един бутон. За да може това да бъде така, микроконтролерът трябва да зарежда програмата, управляваща всичко, автоматично и веднага след стартирането си. За лабораторните условия, в които работи проекта в момента, това не е нужно и освен това, постоянно трябва да се извършват настроики по кодът и настроиването на raspberry-то да пуска програмата автоматични би било пречка. За пускането на системата на пазарът обаче, това е напълно задължително.

3.6.9 – Предоставяне за възможност за настроика на системата.
	
Системата, трябва да предоставя на водачът възможност за избор, относно това, как системата работи. Тези настроики трябва да включват: 
	
	1 – Избор на скоростта, с която колата да се движи.

2 – Как да реагира автомобилът по време на завои(колко остро да влиза колата в завоят, с каква скорост, каква линия да следва – нормална или спортна(“сечене” на завоите), дали при отсъствие на коли, да “сече” завоят и през другото платно и т.н.).

3 – При пътуване по шосе, когато автомобилът отпред потдържа по-ниска скорост, от задаената на водачът, каква да бъде дистанцията между двата автомобилите.

4 – Водачът трябва да задава на системата атмосферните условия, за да може тя де се съобразява с тях.

Разбира се, всички тези възможности за настроика, трябва да бъдат ограничени, така че да не се допуска управляването на автомобилът на или отвъд границата на възможностите му, което би довело до произшествие. 

3.6.10 – Поставяне на дисплей, които да показва, какво вижда системата, какво прави тя в момента и да сигнализира при някаква повреда или проблем.

Добре е, тази система да комуникира по някакъв начин с водачът на автомобилът. Трябва да бъде сложен някакъв дисплей, на които да бъдат изобразявани следните неща:

1 – Начинът, по който системата вижда пътят и положението на колата спрямо него. Това първо би било интересно за гледане, второ ако ситемата разчете неправилно пътят, водачът ще може да го види от по-рано.

2 – Да бъдат изписвани всякакви проблеми, с които системата се е сблъскала и да показва, ако има някаква неизправност с някой агрегат по нея.

3 – Да бъдат показвани настроиките, зададени от водачът на автомобилът.
	
Този дисплей, трябва да бъде поставен на видимо място, без да разваля видимостта навън от колата, както и естетиката й.

3.6.11 – Настроика на системата спрямо автомобилът, на които е поставена.

За да работи ефективно една такава система, тя трябва да има достатъчно информация относно автомобилът, които управлява. При шофиране, особено на път със завои, всеки автомобил изисква индивидуален подход – при лоши атмосферни условия например, към влизането и излизането от завоя трябва да бъде подходено напълно различно в зависимост от колата. Основните неща, от които зависи този подход са:

1 – Задвижването на автомобилът – дали колата е с предно, задно или двоино(и дали двоиното е постоянно зацепено или не).

2 – Мощност на двигателя – за да знае системата колко газ да даде на изхода на завоя, трябва да знае с каква мощност разполаа автомобилът, защото газта, нужна за излизане от завоя на автомобил с 80 к.с. би изхвърла от завоя автомобил с 500 к.с.

3 – Тип на автомобила и окачване – Скороста, с която един средностатистически автомобил влиза в един завой, би била прекалено висока за например някой стар джип и същевременно с това прекалено ниска за един расов спортен автомобил.

Друго важно нещо, което трябва да бъде настроено в системата, са спирачките. При нужда от рязко спиране е добре да се знае приблизителният спирачен път на автомобилът, за да може да се използва цялото пространство по време на спирането. Така спирането може да бъде усъществено по-плавно и съшевременно с това намаля шанса за удар отзад.



3.7 Изводи


